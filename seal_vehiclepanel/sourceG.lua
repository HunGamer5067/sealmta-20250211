local bankToModels = {
	{ -- 33
		602, 496, 401, 527, 589, 587, 533, 526, 517, 600, 436, 491, 445,
		507, 585, 492, 546, 551, 426, 547, 405, 580, 409, 550, 566, 540,
		421, 529, 420, 490, 596, 598, 599, 597, 554, 579, 400, 489, 505,
		479, 458, 535, 402, 603, 429, 541, 415, 480, 562, 565, 494, 502,
		503, 411, 559, 561, 560, 506, 451, 558, 477, 500, 495, 609
	},
	{ -- 34
		518, 419, 474, 545, 410, 439, 549, 604, 466, 516, 467, 438, 605,
		543, 404, 536, 575, 534, 567, 576, 412, 542, 475, 434, 555
	},
	{ -- 35
		525, 552, 416, 528, 470, 428, 459, 422, 482, 582, 413, 440, 478,
		483, 418
	}
}

electricVehicles = {
	[561] = true,
	[516] = true,
	[560] = true,
}

local modelsToBank = {}

for i = 1, #bankToModels do
	for k = 1, #bankToModels[i] do
		local v = bankToModels[i][k]

		if getVehicleType(v) == "Automobile" then
			modelsToBank[v] = 1 + i
		elseif getVehicleType(v) == "Helicopter" then
			modelsToBank[v] = 1
		end
	end
end

local sfxParsed = {}

for i = 400, 611 do
	local vehicleType = getVehicleType(i)

	if vehicleType == "Automobile" then
		if modelsToBank[i] then
			sfxParsed[i] = modelsToBank[i]
		end
	elseif vehicleType == "Helicopter" then
		sfxParsed[i] = 1
	end
end

function getDoorOpenSound(model)
	if sfxParsed[model] then
		return ":seal_vehiclepanel/files/door/" .. sfxParsed[model] + 5 .. ".wav"
	end

	return false
end

function getDoorCloseSound(model)
	if sfxParsed[model] then
		return ":seal_vehiclepanel/files/door/" .. sfxParsed[model] .. ".wav"
	end

	return false
end

fuelTankSize = {
	[527] = 70,
	[426] = 70,
	[400] = 70,
	[540] = 70,
	[596] = 70,
	[589] = 70,
	[587] = 70,
	[585] = 70,
	[580] = 70,
	[566] = 70,
	[560] = 70,
	[558] = 70,
	[554] = 70,
	[551] = 70,
	[550] = 70,
	[529] = 70,
	[507] = 70,
	[506] = 70,
	[502] = 70,
	[458] = 70,
	[451] = 70,
	[445] = 70,
	[429] = 70,
	[421] = 70,
	[420] = 70,
	[415] = 70,
	[411] = 70,
	[405] = 70,
	[401] = 70,
	[579] = 70,
	[491] = 70,
	[603] = 70,
	[600] = 70,
	[576] = 70,
	[567] = 70,
	[543] = 70,
	[536] = 70,
	[492] = 70,
	[479] = 70,
	[467] = 70,
	[466] = 70,
	[439] = 70,
	[412] = 70,
	[410] = 70,
	[402] = 70,
	[542] = 70,
	[535] = 70,
	[517] = 70,
	[525] = 70,
	[438] = 70,
	[436] = 70,
	[602] = 70,
	[586] = 70,
	[565] = 70,
	[562] = 70,
	[559] = 70,
	[547] = 70,
	[531] = 70,
	[526] = 70,
	[508] = 70,
	[496] = 70,
	[477] = 70,
	[470] = 70,
	[463] = 70,
	[462] = 70,
	[456] = 70,
	[453] = 70,
	[452] = 70,
	[448] = 70,
	[446] = 70,
	[437] = 70,
	[431] = 70,
	[418] = 70,
	[416] = 70,
	[413] = 70,
	[409] = 70,
	[408] = 70,
	[521] = 70,
	[522] = 70,
	[475] = 70,

	[516] = 100,
	[561] = 100,
}

function getTheFuelTankTable()
	return fuelTankSize
end

function getTheFuelTankSizeOfVehicle(model)
	return fuelTankSize[model] or 50
end

consumptions = {
	[561] = 0.72,
	[527] = 0.96,
	[426] = 0.96,
	[400] = 1.62,
	[540] = 4,
	[596] = 1.08,
	[589] = 0.66,
	[587] = 1.02,
	[585] = 1.08,
	[580] = 0.78,
	[566] = 0.36,
	[560] = 0.66,
	[558] = 0.72,
	[554] = 1.14,
	[551] = 0.9,
	[550] = 0.66,
	[529] = 0.54,
	[507] = 1.02,
	[506] = 0.72,
	[502] = 0.78,
	[458] = 0.42,
	[451] = 0.96,
	[445] = 0.9,
	[429] = 0.9,
	[421] = 0.84,
	[420] = 0.9,
	[415] = 1.38,
	[411] = 1.08,
	[405] = 4,
	[401] = 1.08,
	[579] = 1.32,
	[491] = 1.02,
	[603] = 1.56,
	[600] = 1.32,
	[576] = 1.02,
	[567] = 0.96,
	[543] = 0.9,
	[536] = 0.78,
	[492] = 0.84,
	[479] = 0.72,
	[467] = 0.72,
	[466] = 0.6,
	[439] = 0.84,
	[412] = 1.02,
	[410] = 1.08,
	[402] = 1.44,
	[542] = 0.84,
	[535] = 0.84,
	[517] = 0.9,
	[525] = 0.72,
	[438] = 0.72,
	[436] = 0.54,
	[602] = 0.9,
	[586] = 0.24,
	[565] = 0.6,
	[562] = 0.66,
	[559] = 0.54,
	[547] = 0.72,
	[531] = 0.6,
	[526] = 0.9,
	[516] = 1.26,
	[508] = 0.9,
	[496] = 0.42,
	[477] = 1.08,
	[470] = 1.26,
	[463] = 0.24,
	[462] = 0.12,
	[456] = 1.2,
	[453] = 0.48,
	[452] = 0.72,
	[448] = 0.12,
	[446] = 0.72,
	[437] = 2.16,
	[431] = 2.16,
	[418] = 1.02,
	[416] = 0.72,
	[413] = 0.9,
	[409] = 0.72,
	[408] = 1.32,
	[512] = 0.36,
	[522] = 0.24,
	[472] = 1.32
}

function getTheConsumptionTable()
	return consumptions
end

function getTheConsumptionOfVehicle(model)
	return consumptions[model] or 1
end